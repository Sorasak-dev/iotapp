import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns
from data_generator import SensorDataGenerator
from anomaly_models import AnomalyDetectionModels, RuleBasedAnomalyDetector
import os
import warnings
warnings.filterwarnings('ignore')

def load_or_generate_data():
    """‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏£‡∏ô"""
    data_file = "data/sensor_training_data.csv"
    
    if os.path.exists(data_file):
        print("üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå...")
        df = pd.read_csv(data_file)
    else:
        print("üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà...")
        generator = SensorDataGenerator()
        df = generator.generate_training_dataset(days=30, normal_ratio=0.75)  # 30 ‡∏ß‡∏±‡∏ô, 75% ‡∏õ‡∏Å‡∏ï‡∏¥
        generator.save_dataset(df, "sensor_training_data.csv")
    
    return df

def main():
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Anomaly Detection")
    print("=" * 50)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á directories
    os.makedirs("data", exist_ok=True)
    os.makedirs("models", exist_ok=True)
    os.makedirs("plots", exist_ok=True)
    
    # 1. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    df = load_or_generate_data()
    print(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"üìà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏Å‡∏ï‡∏¥: {len(df[df['is_anomaly'] == 0])} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: {len(df[df['is_anomaly'] == 1])} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    # 2. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    print("\n" + "="*50)
    print("üîß ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô...")
    
    anomaly_detector = AnomalyDetectionModels()
    df_prepared, feature_columns = anomaly_detector.prepare_data(df)
    
    # ‡πÅ‡∏¢‡∏Å features ‡πÅ‡∏•‡∏∞ labels
    X = df_prepared[feature_columns].values
    y = df_prepared['is_anomaly'].values
    
    print(f"üîß Features: {len(feature_columns)} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")
    print(f"üìè ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {X.shape}")
    
    # 3. ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• train/test
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )
    
    print(f"üéØ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô: {len(X_train)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"üß™ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏™‡∏ï‡πå: {len(X_test)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    # 4. ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ
    print("\n" + "="*50)
    print("üèÉ‚Äç‚ôÇÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•...")
    
    results = {}
    
    # 4.1 Isolation Forest
    try:
        print("\nüå≤ ‡πÄ‡∏ó‡∏£‡∏ô Isolation Forest...")
        anomaly_detector.train_isolation_forest(X_train, y_train)
        results['isolation_forest'] = anomaly_detector.evaluate_model(
            X_test, y_test, 'isolation_forest'
        )
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô Isolation Forest: {e}")
    
    # 4.2 One-Class SVM
    try:
        print("\n‚öôÔ∏è ‡πÄ‡∏ó‡∏£‡∏ô One-Class SVM...")
        anomaly_detector.train_one_class_svm(X_train, y_train)
        results['one_class_svm'] = anomaly_detector.evaluate_model(
            X_test, y_test, 'one_class_svm'
        )
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô One-Class SVM: {e}")
    
    # 4.3 Ensemble Model
    try:
        print("\nüéØ ‡πÄ‡∏ó‡∏£‡∏ô Ensemble Model...")
        anomaly_detector.train_ensemble_model(X_train, y_train)
        results['ensemble'] = anomaly_detector.evaluate_model(
            X_test, y_test, 'ensemble'
        )
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô Ensemble Model: {e}")
    
    # 5. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
    print("\n" + "="*50)
    print("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•...")
    anomaly_detector.save_models("models/anomaly_detection")
    
    # 6. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    print("\n" + "="*50)
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô:")
    
    comparison_data = []
    for model_name, result in results.items():
        report = result['classification_report']
        
        # ‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö anomaly class (class 1)
        anomaly_precision = report['1']['precision']
        anomaly_recall = report['1']['recall']
        anomaly_f1 = report['1']['f1-score']
        accuracy = report['accuracy']
        
        comparison_data.append({
            'Model': model_name,
            'Accuracy': f"{accuracy:.4f}",
            'Precision (Anomaly)': f"{anomaly_precision:.4f}",
            'Recall (Anomaly)': f"{anomaly_recall:.4f}",
            'F1-Score (Anomaly)': f"{anomaly_f1:.4f}"
        })
        
        print(f"\nüîç {model_name.upper()}:")
        print(f"  - Accuracy: {accuracy:.4f}")
        print(f"  - Precision (Anomaly): {anomaly_precision:.4f}")
        print(f"  - Recall (Anomaly): {anomaly_recall:.4f}")
        print(f"  - F1-Score (Anomaly): {anomaly_f1:.4f}")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    comparison_df = pd.DataFrame(comparison_data)
    print("\nüìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö:")
    print(comparison_df.to_string(index=False))
    
    # 7. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡∏ñ‡πâ‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á matplotlib ‡πÑ‡∏î‡πâ)
    try:
        print("\nüìà ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå...")
        create_performance_plots(results)
        print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà plots/model_comparison.png")
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÑ‡∏î‡πâ: {e}")
    
    # 8. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Rule-Based Detector
    print("\n" + "="*50)
    print("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Rule-Based Anomaly Detector...")
    
    rule_detector = RuleBasedAnomalyDetector()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_cases = [
        {
            'name': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏Å‡∏ï‡∏¥',
            'data': {
                'temperature': 25.0,
                'humidity': 60.0,
                'vpd': 1.2,
                'dew_point': 18.0,
                'voltage': 3.3,
                'battery_level': 85,
                'timestamp': '2024-01-01T12:00:00'
            }
        },
        {
            'name': 'VPD ‡∏ï‡πà‡∏≥ + Dew Point ‡πÉ‡∏Å‡∏•‡πâ',
            'data': {
                'temperature': 25.0,
                'humidity': 95.0,
                'vpd': 0.3,
                'dew_point': 24.5,
                'voltage': 3.3,
                'battery_level': 85,
                'timestamp': '2024-01-01T12:00:00'
            }
        },
        {
            'name': 'Voltage ‡∏ï‡πà‡∏≥ + ‡πÅ‡∏ö‡∏ï‡∏´‡∏°‡∏î',
            'data': {
                'temperature': 25.0,
                'humidity': 60.0,
                'vpd': 1.2,
                'dew_point': 18.0,
                'voltage': 2.5,
                'battery_level': 5,
                'timestamp': '2024-01-01T12:00:00'
            }
        }
    ]
    
    for test_case in test_cases:
        print(f"\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {test_case['name']}")
        anomalies = rule_detector.detect_anomalies([test_case['data']])
        
        if anomalies:
            print("‚ö†Ô∏è ‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥:")
            for anomaly in anomalies:
                icon = "üî¥" if anomaly['alert_level'] == 'red' else "‚ö†Ô∏è"
                print(f"  {icon} {anomaly['type']}: {anomaly['message']}")
        else:
            print("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥")
    
    print("\nüéâ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print("üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:")
    print("  - models/anomaly_detection_*.pkl (‡πÇ‡∏°‡πÄ‡∏î‡∏• ML)")
    print("  - data/sensor_training_data.csv (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô)")
    print("  - plots/model_comparison.png (‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö)")
    
    return anomaly_detector, results

def create_performance_plots(results):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
    if not results:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü")
        return
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ matplotlib
    plt.style.use('default')
    plt.rcParams['font.size'] = 10
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('Model Performance Comparison', fontsize=16)
    
    models = list(results.keys())
    
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü
    accuracies = []
    precisions = []
    recalls = []
    f1_scores = []
    
    for model in models:
        report = results[model]['classification_report']
        accuracies.append(report['accuracy'])
        precisions.append(report['1']['precision'])
        recalls.append(report['1']['recall'])
        f1_scores.append(report['1']['f1-score'])
    
    # ‡∏Å‡∏£‡∏≤‡∏ü Accuracy
    axes[0,0].bar(models, accuracies, color='skyblue', alpha=0.7)
    axes[0,0].set_title('Accuracy Comparison')
    axes[0,0].set_ylabel('Accuracy')
    axes[0,0].set_ylim(0, 1)
    axes[0,0].tick_params(axis='x', rotation=45)
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ö‡∏ô‡πÅ‡∏ó‡πà‡∏á‡∏Å‡∏£‡∏≤‡∏ü
    for i, v in enumerate(accuracies):
        axes[0,0].text(i, v + 0.01, f'{v:.3f}', ha='center', va='bottom')
    
    # ‡∏Å‡∏£‡∏≤‡∏ü Precision
    axes[0,1].bar(models, precisions, color='lightcoral', alpha=0.7)
    axes[0,1].set_title('Precision (Anomaly Detection)')
    axes[0,1].set_ylabel('Precision')
    axes[0,1].set_ylim(0, 1)
    axes[0,1].tick_params(axis='x', rotation=45)
    
    for i, v in enumerate(precisions):
        axes[0,1].text(i, v + 0.01, f'{v:.3f}', ha='center', va='bottom')
    
    # ‡∏Å‡∏£‡∏≤‡∏ü Recall
    axes[1,0].bar(models, recalls, color='lightgreen', alpha=0.7)
    axes[1,0].set_title('Recall (Anomaly Detection)')
    axes[1,0].set_ylabel('Recall')
    axes[1,0].set_ylim(0, 1)
    axes[1,0].tick_params(axis='x', rotation=45)
    
    for i, v in enumerate(recalls):
        axes[1,0].text(i, v + 0.01, f'{v:.3f}', ha='center', va='bottom')
    
    # ‡∏Å‡∏£‡∏≤‡∏ü F1-Score
    axes[1,1].bar(models, f1_scores, color='gold', alpha=0.7)
    axes[1,1].set_title('F1-Score (Anomaly Detection)')
    axes[1,1].set_ylabel('F1-Score')
    axes[1,1].set_ylim(0, 1)
    axes[1,1].tick_params(axis='x', rotation=45)
    
    for i, v in enumerate(f1_scores):
        axes[1,1].text(i, v + 0.01, f'{v:.3f}', ha='center', va='bottom')
    
    plt.tight_layout()
    plt.savefig('plots/model_comparison.png', dpi=300, bbox_inches='tight')
    plt.close()  # ‡∏õ‡∏¥‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î memory

if __name__ == "__main__":
    detector, results = main()
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
import random
import os

class SensorDataGenerator:
    def __init__(self):
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏° server.js ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        self.device_templates = [
            {"id": "1", "name": "E-MIB1", "type": "Temperature & Humidity Sensor"},
            {"id": "2", "name": "E-MIB2", "type": "Temperature & Humidity Sensor"},
            {"id": "3", "name": "E-MIB3", "type": "Temperature & Humidity Sensor"},
            {"id": "4", "name": "E-MIB4", "type": "Temperature & Humidity Sensor"}
        ]
    
    def generate_normal_sensor_data(self, device_id, start_date, end_date, interval_minutes=10):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô server.js)"""
        print(f"üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö device {device_id}...")
        
        data = []
        current_time = start_date
        device_variation = int(device_id) if device_id.isdigit() else 1
        
        while current_time <= end_date:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏° server.js
            temperature = round(random.uniform(20, 40), 2)
            humidity = round(random.uniform(30, 80) + device_variation, 2)
            co2 = int(random.uniform(200, 1000) + (device_variation * 50))
            ec = round(random.uniform(0.5, 2.0) + (device_variation * 0.1), 2)
            ph = round(random.uniform(4, 9) + (device_variation * 0.2), 2)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì dew point ‡πÅ‡∏•‡∏∞ VPD (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô server.js)
            a, b = 17.27, 237.7
            alpha = ((a * temperature) / (b + temperature)) + np.log(humidity / 100)
            dew_point = round((b * alpha) / (a - alpha), 2)
            
            saturation_vapor_pressure = 0.6108 * np.exp((17.27 * temperature) / (temperature + 237.3))
            actual_vapor_pressure = saturation_vapor_pressure * (humidity / 100)
            vpd = round(saturation_vapor_pressure - actual_vapor_pressure, 2)
            
            # Voltage ‡πÅ‡∏•‡∏∞ battery (‡∏õ‡∏Å‡∏ï‡∏¥)
            voltage = round(random.uniform(3.2, 3.4), 2)
            battery_level = random.randint(80, 100)
            
            data.append({
                'device_id': device_id,
                'timestamp': current_time.isoformat(),
                'temperature': temperature,
                'humidity': humidity,
                'co2': co2,
                'ec': ec,
                'ph': ph,
                'dew_point': dew_point,
                'vpd': vpd,
                'voltage': voltage,
                'battery_level': battery_level,
                'anomaly_type': 'normal',
                'is_anomaly': 0
            })
            
            current_time += timedelta(minutes=interval_minutes)
        
        return data
    
    def generate_anomaly_data(self, device_id, start_date, end_date, anomaly_types, interval_minutes=10):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥"""
        print(f"‚ö†Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö device {device_id}...")
        
        data = []
        current_time = start_date
        
        while current_time <= end_date:
            anomaly_type = random.choice(anomaly_types)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
            if anomaly_type == "sudden_drop":
                temperature = round(random.uniform(15, 25), 2)
                humidity = round(random.uniform(30, 80), 2)
                voltage = round(random.uniform(2.5, 2.8), 2)  # Voltage ‡∏ï‡πà‡∏≥
                
            elif anomaly_type == "sudden_spike":
                temperature = round(random.uniform(45, 55), 2)
                humidity = round(random.uniform(30, 80), 2)
                voltage = round(random.uniform(3.6, 4.0), 2)  # Voltage ‡∏™‡∏π‡∏á
                
            elif anomaly_type == "vpd_too_low":
                temperature = round(random.uniform(20, 25), 2)
                humidity = round(random.uniform(90, 98), 2)  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å
                voltage = round(random.uniform(3.2, 3.4), 2)
                
            elif anomaly_type == "low_voltage":
                temperature = round(random.uniform(20, 40), 2)
                humidity = round(random.uniform(30, 80), 2)
                voltage = round(random.uniform(2.0, 2.7), 2)  # Voltage ‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å
                
            else:  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                temperature = round(random.uniform(20, 40), 2)
                humidity = round(random.uniform(30, 80), 2)
                voltage = round(random.uniform(3.2, 3.4), 2)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            co2 = int(random.uniform(200, 1000))
            ec = round(random.uniform(0.5, 2.0), 2)
            ph = round(random.uniform(4, 9), 2)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì dew point ‡πÅ‡∏•‡∏∞ VPD
            a, b = 17.27, 237.7
            alpha = ((a * temperature) / (b + temperature)) + np.log(humidity / 100)
            dew_point = round((b * alpha) / (a - alpha), 2)
            
            saturation_vapor_pressure = 0.6108 * np.exp((17.27 * temperature) / (temperature + 237.3))
            actual_vapor_pressure = saturation_vapor_pressure * (humidity / 100)
            vpd = round(saturation_vapor_pressure - actual_vapor_pressure, 2)
            
            battery_level = random.randint(10, 30) if anomaly_type == "low_voltage" else random.randint(50, 100)
            
            data.append({
                'device_id': device_id,
                'timestamp': current_time.isoformat(),
                'temperature': temperature,
                'humidity': humidity,
                'co2': co2,
                'ec': ec,
                'ph': ph,
                'dew_point': dew_point,
                'vpd': vpd,
                'voltage': voltage,
                'battery_level': battery_level,
                'anomaly_type': anomaly_type,
                'is_anomaly': 1
            })
            
            current_time += timedelta(minutes=interval_minutes)
        
        return data
    
    def generate_training_dataset(self, days=30, normal_ratio=0.8):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
        print(f"üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏ô‡∏¥‡πà‡∏á {days} ‡∏ß‡∏±‡∏ô...")
        
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days)
        
        all_data = []
        
        # ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
        anomaly_types = [
            "sudden_drop", "sudden_spike", "vpd_too_low", "low_voltage"
        ]
        
        for device in self.device_templates:
            device_id = device["id"]
            print(f"üì± ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• {device['name']}...")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            total_points = int(days * 24 * 6)  # 6 ‡∏à‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏ó‡∏∏‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ)
            normal_points = int(total_points * normal_ratio)
            anomaly_points = total_points - normal_points
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏Å‡∏ï‡∏¥
            normal_duration = timedelta(minutes=normal_points * 10)
            normal_end = start_date + normal_duration
            normal_data = self.generate_normal_sensor_data(
                device_id, start_date, normal_end, interval_minutes=10
            )
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
            if anomaly_points > 0:
                anomaly_start = normal_end + timedelta(minutes=10)
                anomaly_duration = timedelta(minutes=anomaly_points * 10)
                anomaly_end = anomaly_start + anomaly_duration
                anomaly_data = self.generate_anomaly_data(
                    device_id, anomaly_start, anomaly_end, anomaly_types, interval_minutes=10
                )
                all_data.extend(anomaly_data)
            
            all_data.extend(normal_data)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        df = pd.DataFrame(all_data)
        df = df.sample(frac=1).reset_index(drop=True)  # ‡∏™‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {len(df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        return df
    
    def save_dataset(self, df, filename="sensor_training_data.csv"):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        os.makedirs("data", exist_ok=True)
        
        filepath = f"data/{filename}"
        df.to_csv(filepath, index=False)
        print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå {filepath}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        print(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏Å‡∏ï‡∏¥: {len(df[df['is_anomaly'] == 0])} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: {len(df[df['is_anomaly'] == 1])} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print(f"üìà ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: {len(df[df['is_anomaly'] == 1]) / len(df) * 100:.2f}%")
        
        return df

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
if __name__ == "__main__":
    print("üöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    generator = SensorDataGenerator()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö (7 ‡∏ß‡∏±‡∏ô)
    df = generator.generate_training_dataset(days=7, normal_ratio=0.75)
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    generator.save_dataset(df, "test_sensor_data.csv")
    
    print("\n‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print("üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á: data/test_sensor_data.csv")
    print("\nüîé ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
    print(df.head())
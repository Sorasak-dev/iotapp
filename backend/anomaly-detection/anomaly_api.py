import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
from anomaly_models import AnomalyDetectionModels, RuleBasedAnomalyDetector
import warnings
warnings.filterwarnings('ignore')

class AnomalyDetectionAPI:
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Anomaly Detection"""
    
    def __init__(self, models_path="models/anomaly_detection"):
        self.models_path = models_path
        self.ml_detector = AnomalyDetectionModels()
        self.rule_detector = RuleBasedAnomalyDetector()
        self.feature_columns = [
            'temperature', 'humidity', 'co2', 'ec', 'ph', 
            'dew_point', 'vpd', 'voltage', 'battery_level'
        ]
        self.time_features = ['hour', 'day_of_week', 'month']
        
        # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
        self.load_models()
    
    def load_models(self):
        """‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            self.ml_detector.load_models(self.models_path)
            print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• ML ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• ML: {e}")
            print("üí° ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: python train_models.py ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    
    def preprocess_sensor_data(self, sensor_data):
        """‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"""
        if isinstance(sensor_data, dict):
            sensor_data = [sensor_data]
        
        df = pd.DataFrame(sensor_data)
        
        # ‡πÅ‡∏õ‡∏•‡∏á timestamp
        if 'timestamp' in df.columns:
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            df['hour'] = df['timestamp'].dt.hour
            df['day_of_week'] = df['timestamp'].dt.dayofweek
            df['month'] = df['timestamp'].dt.month
        else:
            # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            now = datetime.now()
            df['hour'] = now.hour
            df['day_of_week'] = now.weekday()
            df['month'] = now.month
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á missing indicators
        for col in self.feature_columns:
            df[f'{col}_is_missing'] = df[col].isnull().astype(int)
        
        # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ null ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢)
        for col in self.feature_columns:
            if col in df.columns:
                df[col] = df[col].fillna(df[col].mean() if not df[col].isnull().all() else 0)
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å features ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        missing_cols = [f'{col}_is_missing' for col in self.feature_columns]
        all_features = self.feature_columns + self.time_features + missing_cols
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ 0
        for feature in all_features:
            if feature not in df.columns:
                df[feature] = 0
        
        return df[all_features].values
    
    def detect_anomalies_ml(self, sensor_data, model_name='ensemble'):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏• ML"""
        try:
            X = self.preprocess_sensor_data(sensor_data)
            predictions = self.ml_detector.predict_anomalies(X, model_name)
            
            results = []
            for i, pred in enumerate(predictions):
                results.append({
                    'is_anomaly': bool(pred),
                    'confidence': float(pred),
                    'model_used': model_name,
                    'timestamp': datetime.now().isoformat()
                })
            
            return results
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ ML: {e}")
            return [{'is_anomaly': False, 'error': str(e)}]
    
    def detect_anomalies_rules(self, sensor_data, data_history=None):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏é‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        try:
            anomalies = self.rule_detector.detect_anomalies(sensor_data)
            
            results = []
            for anomaly in anomalies:
                results.append({
                    'is_anomaly': True,
                    'anomaly_type': anomaly['type'],
                    'alert_level': anomaly['alert_level'],
                    'message': anomaly['message'],
                    'timestamp': anomaly['timestamp'],
                    'detection_method': 'rule_based'
                })
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
            if not results:
                results.append({
                    'is_anomaly': False,
                    'message': 'Sensor operating normally',
                    'detection_method': 'rule_based',
                    'timestamp': datetime.now().isoformat()
                })
            
            return results
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏é: {e}")
            return [{'is_anomaly': False, 'error': str(e)}]
    
    def detect_anomalies_hybrid(self, sensor_data, data_history=None, ml_model='ensemble'):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏ö‡∏ö‡∏ú‡∏™‡∏°‡∏ú‡∏™‡∏≤‡∏ô (ML + Rules)"""
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏é
        rule_results = self.detect_anomalies_rules(sensor_data, data_history)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ ML
        ml_results = self.detect_anomalies_ml(sensor_data, ml_model)
        
        # ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        combined_results = {
            'rule_based_detection': rule_results,
            'ml_detection': ml_results,
            'summary': {
                'rule_anomalies_found': any(r.get('is_anomaly', False) for r in rule_results),
                'ml_anomalies_found': any(r.get('is_anomaly', False) for r in ml_results),
                'total_anomalies': 0,
                'alert_level': 'green',
                'recommendations': []
            }
        }
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î alert level ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        rule_anomalies = [r for r in rule_results if r.get('is_anomaly', False)]
        ml_anomalies = [r for r in ml_results if r.get('is_anomaly', False)]
        
        combined_results['summary']['total_anomalies'] = len(rule_anomalies) + len(ml_anomalies)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î alert level ‡∏ï‡∏≤‡∏° rule-based (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤)
        if rule_anomalies:
            alert_levels = [r.get('alert_level', 'yellow') for r in rule_anomalies]
            if 'red' in alert_levels:
                combined_results['summary']['alert_level'] = 'red'
            elif 'yellow' in alert_levels:
                combined_results['summary']['alert_level'] = 'yellow'
        elif ml_anomalies:
            combined_results['summary']['alert_level'] = 'yellow'  # ML ‡πÉ‡∏´‡πâ yellow ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        recommendations = []
        for anomaly in rule_anomalies:
            recommendations.append({
                'type': anomaly.get('anomaly_type', 'unknown'),
                'message': anomaly.get('message', ''),
                'priority': 'high' if anomaly.get('alert_level') == 'red' else 'medium'
            })
        
        if ml_anomalies and not rule_anomalies:
            recommendations.append({
                'type': 'general_anomaly',
                'message': 'Machine learning model detected unusual patterns. Please investigate.',
                'priority': 'medium'
            })
        
        combined_results['summary']['recommendations'] = recommendations
        combined_results['timestamp'] = datetime.now().isoformat()
        
        return combined_results
    
    def generate_alert_message(self, anomaly_results):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢"""
        if not anomaly_results.get('summary', {}).get('rule_anomalies_found') and \
           not anomaly_results.get('summary', {}).get('ml_anomalies_found'):
            return {
                'level': 'info',
                'title': 'System Normal',
                'message': 'All sensors are operating within normal parameters.',
                'icon': '‚úÖ'
            }
        
        alert_level = anomaly_results.get('summary', {}).get('alert_level', 'yellow')
        recommendations = anomaly_results.get('summary', {}).get('recommendations', [])
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        icons = {'red': 'üî¥', 'yellow': '‚ö†Ô∏è', 'green': '‚úÖ'}
        levels = {'red': 'critical', 'yellow': 'warning', 'green': 'info'}
        
        icon = icons.get(alert_level, '‚ö†Ô∏è')
        level = levels.get(alert_level, 'warning')
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å
        if alert_level == 'red':
            title = 'Critical System Alert'
            message = 'Immediate attention required! Critical anomalies detected in sensor data.'
        elif alert_level == 'yellow':
            title = 'System Warning'
            message = 'Unusual patterns detected. Please investigate when possible.'
        else:
            title = 'System Information'
            message = 'Minor variations detected in sensor readings.'
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        if recommendations:
            details = []
            for rec in recommendations:
                details.append(f"‚Ä¢ {rec.get('message', 'Unknown issue')}")
            message += f"\n\nDetails:\n" + "\n".join(details)
        
        return {
            'level': level,
            'title': title,
            'message': message,
            'icon': icon,
            'timestamp': datetime.now().isoformat(),
            'recommendations': recommendations
        }

class SensorSimulator:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    
    def __init__(self):
        self.current_values = {
            'temperature': 25.0,
            'humidity': 60.0,
            'co2': 400,
            'ec': 1.2,
            'ph': 6.5,
            'voltage': 3.3,
            'battery_level': 85
        }
    
    def generate_normal_data(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏Å‡∏ï‡∏¥"""
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        data = {}
        for key, value in self.current_values.items():
            if key in ['temperature', 'humidity']:
                noise = np.random.normal(0, 0.5)
            elif key == 'voltage':
                noise = np.random.normal(0, 0.05)
            elif key == 'battery_level':
                noise = np.random.normal(0, 1)
            else:
                noise = np.random.normal(0, value * 0.02)
            
            data[key] = value + noise
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì dew point ‡πÅ‡∏•‡∏∞ VPD
        temp = data['temperature']
        humidity = data['humidity']
        
        a, b = 17.27, 237.7
        alpha = ((a * temp) / (b + temp)) + np.log(humidity / 100)
        dew_point = (b * alpha) / (a - alpha)
        
        saturation_vapor_pressure = 0.6108 * np.exp((17.27 * temp) / (temp + 237.3))
        actual_vapor_pressure = saturation_vapor_pressure * (humidity / 100)
        vpd = saturation_vapor_pressure - actual_vapor_pressure
        
        data['dew_point'] = round(dew_point, 2)
        data['vpd'] = round(vpd, 2)
        data['timestamp'] = datetime.now().isoformat()
        
        return data
    
    def generate_anomaly_data(self, anomaly_type):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        data = self.generate_normal_data()
        
        if anomaly_type == 'sudden_drop':
            data['temperature'] = 15.0  # ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏•‡∏î‡∏•‡∏á‡∏°‡∏≤‡∏Å
            data['voltage'] = 2.5       # voltage ‡∏ï‡πà‡∏≥
            
        elif anomaly_type == 'sudden_spike':
            data['temperature'] = 50.0  # ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å
            data['voltage'] = 3.8       # voltage ‡∏™‡∏π‡∏á
            
        elif anomaly_type == 'low_voltage':
            data['voltage'] = 2.0       # voltage ‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å
            data['battery_level'] = 15  # ‡πÅ‡∏ö‡∏ï‡∏ï‡πà‡∏≥
            
        elif anomaly_type == 'vpd_too_low':
            data['humidity'] = 95       # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å
            data['temperature'] = 22    # ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πà‡∏≥
            
        elif anomaly_type == 'dew_point_close':
            data['humidity'] = 98       # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å
            data['temperature'] = 25
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì dew point ‡πÉ‡∏´‡∏°‡πà
            temp = data['temperature']
            humidity = data['humidity']
            a, b = 17.27, 237.7
            alpha = ((a * temp) / (b + temp)) + np.log(humidity / 100)
            data['dew_point'] = round((b * alpha) / (a - alpha), 2)
        
        return data

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
if __name__ == "__main__":
    print("üöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Anomaly Detection API")
    print("=" * 50)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á API instance
    api = AnomalyDetectionAPI()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    simulator = SensorSimulator()
    
    print("\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏Å‡∏ï‡∏¥:")
    normal_data = simulator.generate_normal_data()
    print(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏Å‡∏ï‡∏¥:")
    for key, value in normal_data.items():
        if isinstance(value, float):
            print(f"  {key}: {value:.2f}")
        else:
            print(f"  {key}: {value}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    results = api.detect_anomalies_hybrid([normal_data])
    alert = api.generate_alert_message(results)
    
    print(f"\n{alert['icon']} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: {alert['title']}")
    print(f"üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {alert['message']}")
    
    print("\n" + "="*50)
    print("‚ö†Ô∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥:")
    
    anomaly_types = ['sudden_drop', 'vpd_too_low', 'low_voltage', 'dew_point_close']
    
    for anomaly_type in anomaly_types:
        print(f"\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö {anomaly_type}:")
        anomaly_data = simulator.generate_anomaly_data(anomaly_type)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        key_data = {k: v for k, v in anomaly_data.items() if k in ['temperature', 'humidity', 'vpd', 'voltage', 'battery_level']}
        print(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {key_data}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        results = api.detect_anomalies_hybrid([anomaly_data])
        alert = api.generate_alert_message(results)
        
        print(f"{alert['icon']} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: {alert['title']}")
        if alert['level'] != 'info':
            print(f"üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {alert['message'].split('Details:')[0].strip()}")
    
    print("\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print("\nüí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
    print("  from anomaly_api import AnomalyDetectionAPI")
    print("  api = AnomalyDetectionAPI()")
    print("  results = api.detect_anomalies_hybrid(sensor_data)")
import numpy as np
import pandas as pd
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler, RobustScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
from sklearn.svm import OneClassSVM
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import os
import warnings
import logging

warnings.filterwarnings('ignore')
logger = logging.getLogger(__name__)

class AnomalyDetectionModels:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥"""
    
    def __init__(self):
        self.models = {}
        self.scalers = {}
        self.feature_columns = [
            'temperature', 'humidity', 'co2', 'ec', 'ph', 
            'dew_point', 'vpd', 'voltage', 'battery_level'
        ]
        self.time_features = ['hour', 'day_of_week', 'month']
        
    def prepare_data(self, df):
        """‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô"""
        print("üîß ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
        
        df_clean = df.copy()
        
        # ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô datetime
        df_clean['timestamp'] = pd.to_datetime(df_clean['timestamp'])
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á time features
        df_clean['hour'] = df_clean['timestamp'].dt.hour
        df_clean['day_of_week'] = df_clean['timestamp'].dt.dayofweek
        df_clean['month'] = df_clean['timestamp'].dt.month
        
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤ null (‡∏™‡∏£‡πâ‡∏≤‡∏á indicator variables)
        for col in self.feature_columns:
            df_clean[f'{col}_is_missing'] = df_clean[col].isnull().astype(int)
        
        # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ null ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        df_clean[self.feature_columns] = df_clean[self.feature_columns].fillna(
            df_clean[self.feature_columns].mean()
        )
        
        # ‡∏£‡∏ß‡∏° features ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        missing_cols = [f'{col}_is_missing' for col in self.feature_columns]
        all_features = self.feature_columns + self.time_features + missing_cols
        
        print(f"‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à: {len(all_features)} features")
        return df_clean, all_features
    
    def train_isolation_forest(self, X_train, y_train):
        """‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Isolation Forest"""
        print("üå≤ ‡πÄ‡∏ó‡∏£‡∏ô Isolation Forest...")
        
        # ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô
        X_normal = X_train[y_train == 0]
        
        # Scale ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        scaler = RobustScaler()
        X_normal_scaled = scaler.fit_transform(X_normal)
        
        # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        model = IsolationForest(
            contamination=0.1,      # ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á 10% anomaly
            random_state=42,
            n_estimators=100,
            max_samples='auto'
        )
        model.fit(X_normal_scaled)
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ scaler
        self.models['isolation_forest'] = model
        self.scalers['isolation_forest'] = scaler
        
        print("‚úÖ ‡πÄ‡∏ó‡∏£‡∏ô Isolation Forest ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        return model, scaler
    
    def train_one_class_svm(self, X_train, y_train):
        """‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• One-Class SVM"""
        print("‚öôÔ∏è ‡πÄ‡∏ó‡∏£‡∏ô One-Class SVM...")
        
        # ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô
        X_normal = X_train[y_train == 0]
        
        # Scale ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        scaler = StandardScaler()
        X_normal_scaled = scaler.fit_transform(X_normal)
        
        # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        model = OneClassSVM(
            kernel='rbf',
            gamma='scale',
            nu=0.1  # ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á 10% anomaly
        )
        model.fit(X_normal_scaled)
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ scaler
        self.models['one_class_svm'] = model
        self.scalers['one_class_svm'] = scaler
        
        print("‚úÖ ‡πÄ‡∏ó‡∏£‡∏ô One-Class SVM ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        return model, scaler
    
    def train_ensemble_model(self, X_train, y_train):
        """‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏ö‡∏ö Ensemble (‡∏£‡∏ß‡∏° Isolation Forest + One-Class SVM)"""
        print("üéØ ‡πÄ‡∏ó‡∏£‡∏ô Ensemble Model...")
        
        # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
        if_model, if_scaler = self.train_isolation_forest(X_train, y_train)
        svm_model, svm_scaler = self.train_one_class_svm(X_train, y_train)
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• ensemble
        ensemble_models = {
            'isolation_forest': if_model,
            'one_class_svm': svm_model
        }
        ensemble_scalers = {
            'isolation_forest': if_scaler,
            'one_class_svm': svm_scaler
        }
        
        self.models['ensemble'] = ensemble_models
        self.scalers['ensemble'] = ensemble_scalers
        
        print("‚úÖ ‡πÄ‡∏ó‡∏£‡∏ô Ensemble Model ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        return ensemble_models, ensemble_scalers
    
    def predict_anomalies(self, X_test, model_name='ensemble'):
        """‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥"""
        if model_name == 'ensemble':
            return self._predict_ensemble(X_test)
        else:
            model = self.models[model_name]
            scaler = self.scalers[model_name]
            X_test_scaled = scaler.transform(X_test)
            predictions = model.predict(X_test_scaled)
            # ‡πÅ‡∏õ‡∏•‡∏á (-1 = anomaly, 1 = normal) ‡πÄ‡∏õ‡πá‡∏ô (1 = anomaly, 0 = normal)
            return (predictions == -1).astype(int)
    
    def _predict_ensemble(self, X_test):
        """‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏• Ensemble"""
        models = self.models['ensemble']
        scalers = self.scalers['ensemble']
        
        predictions = []
        
        # Isolation Forest
        if_scaler = scalers['isolation_forest']
        if_model = models['isolation_forest']
        X_test_if = if_scaler.transform(X_test)
        if_pred = (if_model.predict(X_test_if) == -1).astype(int)
        predictions.append(if_pred)
        
        # One-Class SVM
        svm_scaler = scalers['one_class_svm']
        svm_model = models['one_class_svm']
        X_test_svm = svm_scaler.transform(X_test)
        svm_pred = (svm_model.predict(X_test_svm) == -1).astype(int)
        predictions.append(svm_pred)
        
        # Voting: ‡∏ñ‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô anomaly
        ensemble_pred = np.array(predictions).sum(axis=0) >= 1
        
        return ensemble_pred.astype(int)
    
    def evaluate_model(self, X_test, y_test, model_name='ensemble'):
        """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
        print(f"üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏• {model_name}...")
        
        y_pred = self.predict_anomalies(X_test, model_name)
        
        # Classification Report
        print("\nüìà Classification Report:")
        print(classification_report(y_test, y_pred))
        
        # Confusion Matrix
        cm = confusion_matrix(y_test, y_pred)
        print("\nüîç Confusion Matrix:")
        print(cm)
        
        # ROC AUC Score
        if len(np.unique(y_test)) > 1:
            auc_score = roc_auc_score(y_test, y_pred)
            print(f"\nüéØ ROC AUC Score: {auc_score:.4f}")
        
        return {
            'predictions': y_pred,
            'true_labels': y_test,
            'confusion_matrix': cm,
            'classification_report': classification_report(y_test, y_pred, output_dict=True)
        }
    
    def save_models(self, filepath_prefix="models/anomaly_detection"):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
        print("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå models ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        os.makedirs("models", exist_ok=True)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
        for model_name, model in self.models.items():
            joblib.dump(model, f"{filepath_prefix}_{model_name}.pkl")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å scalers
        joblib.dump(self.scalers, f"{filepath_prefix}_scalers.pkl")
        
        print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
    
    def load_models(self, filepath_prefix="models/anomaly_detection"):
        """‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
        print("üì• ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•...")
        
        try:
            # ‡πÇ‡∏´‡∏•‡∏î scalers
            self.scalers = joblib.load(f"{filepath_prefix}_scalers.pkl")
            
            # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
            for model_name in ['isolation_forest', 'one_class_svm', 'ensemble']:
                try:
                    self.models[model_name] = joblib.load(f"{filepath_prefix}_{model_name}.pkl")
                except FileNotFoundError:
                    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {model_name} model")
            
            print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            
        except FileNotFoundError:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•")

class RuleBasedAnomalyDetector:
    """‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß"""
    
    def __init__(self):
        # ‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏°‡∏≤
        self.rules = {
            'sudden_drop': {
                'condition': self._check_sudden_drop,
                'alert_level': 'red',
                'message': "Abnormal sensor behavior detected. Value dropped faster than expected."
            },
            'sudden_spike': {
                'condition': self._check_sudden_spike,
                'alert_level': 'yellow',
                'message': "Abnormally high sensor reading. Please check."
            },
            'vpd_too_low': {
                'condition': self._check_vpd_too_low,
                'alert_level': 'red',
                'message': "VPD too low! Risk of plant disease. Check ventilation system."
            },
            'low_voltage': {
                'condition': self._check_low_voltage,
                'alert_level': 'yellow',
                'message': "Voltage instability alert. Please check electrical system."
            },
            'dew_point_close': {
                'condition': self._check_dew_point_close,
                'alert_level': 'red',
                'message': "Dew Point close to actual temperature. Risk of mold."
            },
            'battery_depleted': {
                'condition': self._check_battery_depleted,
                'alert_level': 'red',
                'message': "Sensor battery depleted. Please replace or recharge."
            }
        }
    
    def detect_anomalies(self, sensor_data, data_history=None):
        """
        ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 2 parameters (sensor_data, data_history)
        
        Args:
            sensor_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (dict ‡∏´‡∏£‡∏∑‡∏≠ list)
            data_history: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (list, optional)
        
        Returns:
            list: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏û‡∏ö
        """
        try:
            anomalies = []
            
            # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ input data
            if isinstance(sensor_data, dict):
                current_data = sensor_data
                data_stream = [sensor_data]
            elif isinstance(sensor_data, list):
                if len(sensor_data) == 0:
                    return []
                current_data = sensor_data[-1]
                data_stream = sensor_data
            else:
                logger.error(f"Invalid sensor_data type: {type(sensor_data)}")
                return []
            
            # ‡πÉ‡∏ä‡πâ data_history ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ, ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡πÉ‡∏ä‡πâ data_stream
            if data_history and len(data_history) > 0:
                # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å history
                if len(data_history) > 1:
                    previous_data = data_history[-2]
                else:
                    previous_data = None
                full_data_stream = data_history
            else:
                # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å sensor_data
                if len(data_stream) > 1:
                    previous_data = data_stream[-2]
                else:
                    previous_data = None
                full_data_stream = data_stream
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Å‡∏é
            for rule_name, rule_config in self.rules.items():
                try:
                    is_anomaly = rule_config['condition'](current_data, previous_data)
                    
                    if is_anomaly:
                        anomaly_info = {
                            'type': rule_name,
                            'alert_level': rule_config['alert_level'],
                            'message': rule_config['message'],
                            'timestamp': current_data.get('timestamp', datetime.now().isoformat()),
                            'confidence': 0.9,  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö rule-based
                            'data': current_data.copy()
                        }
                        
                        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                        if previous_data:
                            anomaly_info['previous_data'] = previous_data.copy()
                        
                        anomalies.append(anomaly_info)
                        
                except Exception as rule_error:
                    # ‡∏ñ‡πâ‡∏≤ rule ‡πÉ‡∏î‡πÉ‡∏î error ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    logger.error(f"Error in rule {rule_name}: {rule_error}")
                    continue
            
            return anomalies
            
        except Exception as e:
            logger.error(f"Error in detect_anomalies: {e}")
            return []
    
    def _check_sudden_drop(self, current_data, previous_data):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß"""
        try:
            if previous_data is None:
                return False
            
            # ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏•‡∏î‡∏•‡∏á > 5¬∞C ‡πÉ‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ
            if (current_data.get('temperature') is not None and 
                previous_data.get('temperature') is not None):
                temp_diff = previous_data['temperature'] - current_data['temperature']
                if temp_diff > 5:
                    return True
            
            # Voltage ‡∏•‡∏î‡∏•‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 2.8V
            if current_data.get('voltage') is not None and current_data['voltage'] < 2.8:
                return True
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏•‡∏î‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß > 20%
            if (current_data.get('humidity') is not None and 
                previous_data.get('humidity') is not None):
                humidity_diff = previous_data['humidity'] - current_data['humidity']
                if humidity_diff > 20:
                    return True
            
            return False
            
        except Exception as e:
            logger.error(f"Error in _check_sudden_drop: {e}")
            return False
    
    def _check_sudden_spike(self, current_data, previous_data):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß"""
        try:
            if previous_data is None:
                return False
            
            # ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô > 5¬∞C ‡πÉ‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ
            if (current_data.get('temperature') is not None and 
                previous_data.get('temperature') is not None):
                temp_diff = current_data['temperature'] - previous_data['temperature']
                if temp_diff > 5:
                    return True
            
            # Voltage ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ 3.5V
            if current_data.get('voltage') is not None and current_data['voltage'] > 3.5:
                return True
            
            # ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ > 40¬∞C
            if current_data.get('temperature') is not None and current_data['temperature'] > 40:
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"Error in _check_sudden_spike: {e}")
            return False
    
    def _check_vpd_too_low(self, current_data, previous_data):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö VPD ‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"""
        try:
            if current_data.get('vpd') is not None and current_data['vpd'] < 0.5:
                return True
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì VPD ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
            temp = current_data.get('temperature')
            humidity = current_data.get('humidity')
            
            if temp is not None and humidity is not None:
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì VPD ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
                saturation_vapor_pressure = 0.6108 * np.exp((17.27 * temp) / (temp + 237.3))
                actual_vapor_pressure = saturation_vapor_pressure * (humidity / 100)
                vpd = saturation_vapor_pressure - actual_vapor_pressure
                
                if vpd < 0.5:
                    return True
            
            return False
            
        except Exception as e:
            logger.error(f"Error in _check_vpd_too_low: {e}")
            return False
    
    def _check_low_voltage(self, current_data, previous_data):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö voltage ‡∏ï‡πà‡∏≥"""
        try:
            if current_data.get('voltage') is not None:
                # Voltage ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 3.0V
                if current_data['voltage'] < 3.0:
                    return True
                
                # Voltage ‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏°‡∏≤‡∏Å
                if previous_data and previous_data.get('voltage') is not None:
                    voltage_diff = abs(current_data['voltage'] - previous_data['voltage'])
                    if voltage_diff > 0.5:
                        return True
            
            return False
            
        except Exception as e:
            logger.error(f"Error in _check_low_voltage: {e}")
            return False
    
    def _check_dew_point_close(self, current_data, previous_data):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Dew Point ‡πÉ‡∏Å‡∏•‡πâ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏à‡∏£‡∏¥‡∏á"""
        try:
            # ‡πÉ‡∏ä‡πâ dew_point ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (current_data.get('temperature') is not None and 
                current_data.get('dew_point') is not None):
                temp_diff = current_data['temperature'] - current_data['dew_point']
                if temp_diff < 2:  # ‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2¬∞C
                    return True
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì dew point ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
            temp = current_data.get('temperature')
            humidity = current_data.get('humidity')
            
            if temp is not None and humidity is not None and humidity > 0:
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì dew point ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
                a, b = 17.27, 237.7
                alpha = ((a * temp) / (b + temp)) + np.log(humidity / 100)
                dew_point = (b * alpha) / (a - alpha)
                
                temp_diff = temp - dew_point
                if temp_diff < 2:
                    return True
            
            return False
            
        except Exception as e:
            logger.error(f"Error in _check_dew_point_close: {e}")
            return False
    
    def _check_battery_depleted(self, current_data, previous_data):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏´‡∏°‡∏î"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö battery level
            if current_data.get('battery_level') is not None:
                if current_data['battery_level'] < 10:
                    return True
                # ‡πÅ‡∏ö‡∏ï‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å
                if previous_data and previous_data.get('battery_level') is not None:
                    battery_drop = previous_data['battery_level'] - current_data['battery_level']
                    if battery_drop > 10:  # ‡∏•‡∏î‡∏•‡∏á > 10% ‡πÉ‡∏ô 1 ‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô
                        return True
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö voltage ‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å (‡πÅ‡∏ö‡∏ï‡∏´‡∏°‡∏î)
            if current_data.get('voltage') is not None and current_data['voltage'] < 2.0:
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"Error in _check_battery_depleted: {e}")
            return False

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
if __name__ == "__main__":
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥...")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Rule-based Detector
    print("\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Rule-based Detection...")
    rule_detector = RuleBasedAnomalyDetector()
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_data = [
        {
            'temperature': 25.0,
            'humidity': 95.0,
            'vpd': 0.3,  # VPD ‡∏ï‡πà‡∏≥
            'dew_point': 24.5,  # ‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
            'voltage': 2.5,  # Voltage ‡∏ï‡πà‡∏≥
            'battery_level': 5,  # ‡πÅ‡∏ö‡∏ï‡∏ï‡πà‡∏≥
            'timestamp': '2024-01-01T12:00:00'
        }
    ]
    
    # ‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö method ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 2 parameters
    print("Testing new method signature...")
    anomalies = rule_detector.detect_anomalies(test_data)  # 1 parameter
    print(f"1 param test: {len(anomalies)} anomalies found")
    
    anomalies = rule_detector.detect_anomalies(test_data[0], test_data)  # 2 parameters  
    print(f"2 param test: {len(anomalies)} anomalies found")
    
    if anomalies:
        print("‚ö†Ô∏è ‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥:")
        for anomaly in anomalies:
            print(f"  - {anomaly['type']}: {anomaly['message']}")
            print(f"    Alert Level: {anomaly['alert_level']}")
    else:
        print("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥")
    
    print("\n‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print("üìù Method signature ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß: detect_anomalies(sensor_data, data_history=None)")